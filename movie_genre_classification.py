# -*- coding: utf-8 -*-
"""Movie Genre Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S-N2cUe_uXwGxDFeb7q0gzxZg0ID1p1H
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
import string
from nltk.corpus import stopwords
from nltk.stem import LancasterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

"""#We will load the dataset

"""

data_path="/content/train_data.txt"
train=pd.read_csv(data_path, sep=':::', names=['Title', 'Genre', 'Description'], engine='python')

"""## **We will see how dataset looks like**"""

train.head()

train.describe()

"""To see if the dataset contains any null value"""

print(train.isnull().sum())

"""We will now do the visualization of the data"""

plt.figure(figsize=(14, 7))
sns.countplot(data=train, y='Genre', order=train['Genre'].value_counts().index, palette='viridis')
plt.xlabel('Count', fontsize=14, fontweight='bold')
plt.ylabel('Genre', fontsize=14, fontweight='bold')

# Plot the distribution of genres using a bar plot
plt.figure(figsize=(14, 7))
counts = train['Genre'].value_counts()
sns.barplot(x=counts.index, y=counts, palette='viridis')
plt.xlabel('Genre', fontsize=14, fontweight='bold')
plt.ylabel('Count', fontsize=14, fontweight='bold')
plt.title('Distribution of Genres', fontsize=16, fontweight='bold')
plt.xticks(rotation=90, fontsize=14, fontweight='bold')
plt.show()

"""We will now load the test data"""

data_path1="/content/test_data.txt"

test=pd.read_csv(data_path1, sep=':::', names=['Id', 'Title', 'Description'], engine='python')
test.head()

test.describe()

"""This part will be the data preprocessing and text cleaning"""

import nltk
nltk.download('stopwords')
nltk.download('punkt_tab')

stemmer = LancasterStemmer()
stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = text.lower()
    text = re.sub(r'@\S+', '', text)
    text = re.sub(r'http\S+', '', text)
    text = re.sub(r'pic.\S+', '', text)
    text = re.sub(r"[^a-zA-Z+']", ' ', text)
    text = re.sub(r'\s+[a-zA-Z]\s+', ' ', text + ' ')
    text = "".join([i for i in text if i not in string.punctuation])
    words = nltk.word_tokenize(text)
    stopwords = nltk.corpus.stopwords.words('english')
    text = " ".join([i for i in words if i not in stopwords and len(i) > 2])
    text = re.sub("\s[\s]+", " ", text).strip()
    return text

train['Text_cleaning'] = train['Description'].apply(clean_text)
test['Text_cleaning'] = test['Description'].apply(clean_text)

#We will Calculate the length of cleaned text
train['length_Text_cleaning'] = train['Text_cleaning'].apply(len)
# We will also Visualize the distribution of text lengths
plt.figure(figsize=(8, 7))
sns.histplot(data=train, x='length_Text_cleaning', bins=20, kde=True, color='blue')
plt.xlabel('Length', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')
plt.title('Distribution of Lengths', fontsize=16, fontweight='bold')
plt.show()

"""We will use TF-IDF for text vectorization"""

tfidf_vectorizer = TfidfVectorizer()

X_train = tfidf_vectorizer.fit_transform(train['Text_cleaning'])

X_test = tfidf_vectorizer.transform(test['Text_cleaning'])

"""We will split the data into training and validation sets"""

X = X_train
y = train['Genre']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

"""Train the model with Suppor Vector Classifier and calculate the acuuracy"""

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Initialize the SVM classifier with a kernel (e.g., 'linear' or 'rbf')
classifier = SVC(kernel='linear', C=1)  # You can adjust the kernel and C as needed

# Train the classifier
classifier.fit(X_train, y_train)

# Predict on the validation data
y_pred = classifier.predict(X_val)

# Evaluate the accuracy and classification report
accuracy = accuracy_score(y_val, y_pred)
print("Validation Accuracy:", accuracy)
print(classification_report(y_val, y_pred))

"""We will now make predictions on the test data"""

X_test_predictions = classifier.predict(X_test)
test['Predicted_Genre'] = X_test_predictions

"""Save and display the predicted output"""

test.to_csv('predicted_genres.csv', index=False)

print(test)